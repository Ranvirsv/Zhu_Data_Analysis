return(4)
} else if (file_id <= 99) {
return(5)
} else {
return(6)
}
}
phy_groups <- readxl::read_excel("groups_by_phy_meaning.xlsx")[, -3]
phy_groups <- phy_groups |>
mutate(group = sapply(file_id, get_group)) |>
select(-"input_file")
phy_groups_total_capture <- merge(total_capture, phy_groups, key="file_id")
phy_groups_mean <- phy_groups_total_capture |>
group_by(year, group) |>
summarize(meanCO2 = mean(Total_CO2_capture, na.rm = TRUE), .groups = "drop")
write.csv(phy_groups_total_capture, "./phy_groups_total_capture.csv")
## Genreal Linear Model:
tot_cap.glm <- glm(Total_CO2_capture ~ Solution + temp + shifts, family = gaussian + data = phy_groups_total_capture)
## Genreal Linear Model:
tot_cap.glm <- glm(Total_CO2_capture ~ Solution + temp + shifts, family = gaussian, data = phy_groups_total_capture)
summarise(tot_cap.glm)
summary(tot_cap.glm)
## Genreal Linear Model:
tot_cap.glm <- glm(Total_CO2_capture ~ as.factor(Solution) + temp + shifts, family = gaussian, data = phy_groups_total_capture)
summary(tot_cap.glm)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(ggplot2)
library(dtwclust)
library(dplyr)
library(readr)
library(patchwork)
library(gridExtra)
ggpairs(phy_groups_total_capture)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(GGally)
library(dtwclust)
library(dplyr)
library(readr)
library(patchwork)
library(gridExtra)
ggpairs(phy_groups_total_capture)
ggpairs(phy_groups_total_capture)
ggpairs(phy_groups_total_capture)
ggpairs(phy_groups_total_capture)
ggpairs(phy_groups_total_capture[c("Total_CO2_capture", "year", "Solution", "temp", "sifts")])
ggpairs(phy_groups_total_capture[["Total_CO2_capture", "year", "Solution", "temp", "sifts"]])
pair.data <- phy_groups_total_capture |>
select(c("Total_CO2_capture", "year", "Solution", "temp", "sifts"))
pair.data <- phy_groups_total_capture |>
select(c("Total_CO2_capture", "year", "Solution", "temp", "shifts"))
ggpairs(pair.data)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(GGally)
library(dtwclust)
library(dplyr)
library(readr)
library(patchwork)
library(gridExtra)
hist(phy_groups_total_capture$Total_CO2_capture)
density(phy_groups_total_capture$Total_CO2_capture)
plot(density(phy_groups_total_capture$Total_CO2_capture))
plot(density(phy_groups_total_capture$Total_CO2_capture), bins=10)
plot(density(phy_groups_total_capture$Total_CO2_capture))
hist(phy_groups_total_capture$Total_CO2_capture)
# Function to simulate one round of the game
simulate_round <- function() {
results <- sample(c("H", "T"), 3, replace = TRUE)
if (length(unique(results)) == 1) {
results <- simulate_round()
}
return(results)
}
# Function to simulate the entire experiment
simulate_experiment <- function() {
winner <- ""
while (winner == "") {
results <- simulate_round()
if (length(unique(results)) == 3) {
winner <- which.max(table(results))
}
}
return(winner)
}
# Simulate the experiment 10000 times
set.seed(123)  # for reproducibility
num_simulations <- 10000
wins_A <- replicate(num_simulations, simulate_experiment())
prob_A_wins <- mean(wins_A == 1)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(GGally)
library(dtwclust)
library(dplyr)
library(readr)
library(patchwork)
library(gridExtra)
# Create a funtion to prepocess and join all the files
process_file <- function(file, file_id){
file_number <- str_extract(file, "(?<=/)[^/]+(?=\\.out$)") # Extracting the file number
data <- read.table(file, header = TRUE) |>
filter(state == "transp") |> # Get the files which have state as transp
mutate(year = time/(3600*24*365)) |> # Convert form sec to year
rename(`C(4)` = "C.4.") |>
select(c('soln', 'Calcite', 'Sr', 'C(4)', 'year')) |>
group_by(year) |>
mutate(avg_calcite = ifelse(soln %in% 1:10, mean(Calcite[soln %in% 1:10]), Calcite)) |> # Getting the average value for Calcite
ungroup() |>
# Conversions from mole/liter to CO2/Ha
mutate(Calcite = avg_calcite,
Calcite = Calcite * 500000 * 44 / 1000000 / ifelse(soln %in% 1:10, 1, 10),
`C(4)` = `C(4)` * 500000 * 44 / 1000000 / 10,
file_id = file_id) |>
select(-avg_calcite)
return(data)
}
# Seting the base path for alljobs directory
base_path <- "../Data/alljobs"
# Getting all the simulation folders from the base directory
folders <- list.dirs(path = base_path, full.names = TRUE, recursive = FALSE)
all_data <- list()
file_counter <- 1
for (folder in folders) {
# Adjust the pattern to match your .out files, if they have a specific naming convention
file_paths <- list.files(path = folder, full.names = TRUE, pattern = "*.out$")
data <- process_file(file_paths, file_counter)
all_data <- bind_rows(all_data, data)
file_counter <- file_counter + 1
}
write.csv(all_data, "./all_data.csv")
# So let's get the data where the soln value is 11
# We remove the Sr column as we do not need the Sr data for total CO2 caputre data.
soln_11_data <- all_data |>
filter(soln == 11) |>
group_by(file_id)|>
mutate(`C(4)` = cumsum(`C(4)`)) |>
ungroup()|>
dplyr::select(-"Sr")
calcite <- all_data |>
filter(soln %in% 1:10) |>
dplyr::select(-"Sr")
# Now we can use the claclite and soln_11_data to create the total_capture data that we need to plot for the 126 files.
total_capture <- full_join(calcite, soln_11_data, by = c("year", "file_id"), suffix = c(".soil", ".effluent")) |>
mutate(Total_CO2_capture = Calcite.soil + `C(4).effluent` + Calcite.effluent) |>
filter(soln.soil == 1) |>
dplyr::select(c(Total_CO2_capture, year, file_id))
total_capture <- drop_na(total_capture)
p1 <- ggplot(total_capture, aes(x = year, y = Total_CO2_capture, group = file_id, color = as.factor(file_id))) +
geom_line(show.legend = FALSE) +  # Set show.legend to FALSE to avoid overcrowding with legend
labs(title = "Total CO2 Capture for Each File Over Time",
x = "Year",
y = "Total CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "none")  # Remove legend
selected_file_ids <- seq(1, 126, by = 10)
# Filter the data for the selected file IDs
selected_data <- total_capture %>%
filter(file_id %in% selected_file_ids)
# Plotting smoothed lines for selected files
p2 <- ggplot(selected_data, aes(x = year, y = Total_CO2_capture, group = file_id, color = as.factor(file_id))) +
geom_smooth(se = FALSE, method = "loess") +   # Add smoothed trend lines
scale_color_viridis_d(option = "C") +          # Use a color scale that prints well in black and white
labs(title = "Total CO2 Capture Over Time for Selected Files",
x = "Year",
y = "Total CO2 Capture (tonnes CO2/ha)",
color = "File ID") +
scale_color_viridis_d() +
theme_minimal()
p1
summary_CO2_data <- total_capture |>
group_by(year) |>
summarise(
mean_CO2_capture = mean(Total_CO2_capture)
) |>
ungroup()
summary_calcite_data <- calcite |>
group_by(year) |>
summarise(
mean_calcite_capture = mean(Calcite)
) |>
ungroup()
summary_effluent <- soln_11_data |>
group_by(year) |>
summarise(
mean_c4_capture = mean(`C(4)`),
mean_effluent_calcite_capture = mean(Calcite)
) |>
ungroup()
# Plotting with mean and confidence intervals
ggplot() +
geom_smooth(aes(x = year, y = mean_CO2_capture, color = "Mean CO2 capture"), se = F, data = summary_CO2_data) +
geom_smooth(aes(x = year, y = mean_calcite_capture, color = "Mean Soil Calcite"), se = F, data = summary_calcite_data) +
geom_smooth(aes(x = year, y = mean_c4_capture + mean_effluent_calcite_capture, color = "Mean Effluent Calcite + Bicarbonate"), se = F, data = summary_effluent) +
labs(title = "Average Total CO2 Capture Over Time",
x = "Year",
y = "Total CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "bottom")
data_for_clustering <- total_capture[, c("Total_CO2_capture", "file_id")]
wcss <- sapply(1:10, function(k){
kmeans(data_for_clustering, centers = k)$tot.withinss
})
elbow_plot <- data.frame(k = 1:10, wcss = wcss)
ggplot(elbow_plot, aes(x = k, y = wcss), bins = 10) +
geom_point() +
geom_line() +
labs(title = "Elbow Method for  Optimal k",
x = "Number of clusters (k)",
y = "Total Within-Cluster Sum of Squares (WCSS)")
# set.seed(123) # for reproducibility
clusters <- kmeans(data_for_clustering, centers = 4)
#
# Assign cluster labels back to the file_id
kmean_total_caputer <- total_capture %>%
mutate(group = as.factor(clusters$cluster[match(file_id, data_for_clustering$file_id)]))
## Now that we have the clusters, let's get the mean for those groups
group_mean <- kmean_total_caputer |>
group_by(year, group) |>
summarize(mean_CO2 = mean(Total_CO2_capture, na.rm = TRUE), .groups = 'drop')
plot.k.means.facet <- ggplot() +
geom_line(data = kmean_total_caputer, aes(x = year, y = Total_CO2_capture, group = file_id, color = group), alpha = 0.2) +
geom_smooth(data = group_mean, aes(x = year, y = mean_CO2, group = group, color = group), size = 1.5) +
facet_wrap( ~ group) +
labs(title = "Total CO2 Capture group vise facet",
x = "Year",
y = "Total CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "bottom")
plot.k.means <- ggplot() +
geom_line(data = kmean_total_caputer, aes(x = year, y = Total_CO2_capture, group = file_id, color = group), alpha = 0.3) +
labs(title = "Total CO2 Capture group vise",
x = "Year",
y = "Total CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "none")
plot.all <- ggplot() +
geom_smooth(data = group_mean, aes(x = year, y = mean_CO2, group = group, color = group), level = 0.95) +
labs(title = "Mean CO2 Capture group vise",
x = "Year",
y = "Mean CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "none")
plot.k.means.facet / (plot.k.means + plot.all)
get_group <- function(file_id) {
if (file_id <= 18) {
return(1)
} else if (file_id <= 36) {
return(2)
} else if (file_id <= 63) {
return(3)
} else if (file_id <= 81) {
return(4)
} else if (file_id <= 99) {
return(5)
} else {
return(6)
}
}
phy_groups <- readxl::read_excel("groups_by_phy_meaning.xlsx")[, -3]
phy_groups <- phy_groups |>
mutate(group = sapply(file_id, get_group)) |>
select(-"input_file")
phy_groups_total_capture <- merge(total_capture, phy_groups, key="file_id")
phy_groups_mean <- phy_groups_total_capture |>
group_by(year, group) |>
summarize(meanCO2 = mean(Total_CO2_capture, na.rm = TRUE), .groups = "drop")
plot.phy.facet <- ggplot() +
geom_line(data = phy_groups_total_capture, aes(x=year, y=Total_CO2_capture, group=file_id, color=group), alpha=0.2)+
geom_smooth(data = phy_groups_mean, aes(x=year, y=meanCO2, color=group), size = 1) +
facet_wrap( ~ group, scales = "free_y") + # Allowing for different scales on the y-axis
labs(
title = "CO2 Capture by Physical Group",
x = "Year",
y = "CO2 Capture (tonnes CO2/ha)"
) +
theme_minimal() +
theme(legend.position = "bottom")
plot.phy.facet
clusters <- kmeans(data_for_clustering, centers = 6)
kmean_total_caputer.revised <- total_capture %>%
mutate(group = as.factor(clusters$cluster[match(file_id, data_for_clustering$file_id)]))
group_mean <- kmean_total_caputer.revised |>
group_by(year, group) |>
summarize(mean_CO2 = mean(Total_CO2_capture, na.rm = TRUE), .groups = 'drop')
plot.k.means.revised.facet <- ggplot() +
geom_line(data = kmean_total_caputer.revised, aes(x = year, y = Total_CO2_capture, group = file_id, color = group), alpha = 0.2) +
geom_smooth(data = group_mean, aes(x = year, y = mean_CO2, group = group, color = group), size = 1.5) +
facet_wrap( ~ group) +
labs(title = "Total CO2 Capture group vise facet",
x = "Year",
y = "Total CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "bottom")
plots_k_means <- list()
plots_phy <- list()
for(i in 1:6) {
# Filter the data for each group and create the plot for k-means revised
plots_k_means[[i]] <- ggplot() +
geom_line(data = subset(kmean_total_caputer.revised, group == i), aes(x = year, y = Total_CO2_capture, group = file_id, color = group), alpha = 0.2) +
geom_smooth(data = subset(group_mean, group == i), aes(x = year, y = mean_CO2, group = group, color = group), size = 1.5) +
labs(title = paste("Group", i, "Total CO2 Capture"), x = "Year", y = "Total CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "none")
# Filter the data for each group and create the plot for physical groups
plots_phy[[i]] <- ggplot() +
geom_line(data = subset(phy_groups_total_capture, group == i), aes(x=year, y=Total_CO2_capture, group=file_id, color=group), alpha=0.2) +
geom_smooth(data = subset(phy_groups_mean, group == i), aes(x=year, y=meanCO2, color=group), size = 1) +
labs(title = paste("Group", i, "CO2 Capture by Physical Group"), x = "Year", y = "CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "none")
}
# Now combine the plots side by side for each group
paired_plots <- map2(plots_k_means, plots_phy, ~ .x + .y + plot_layout(guides = 'collect'))
# Use `wrap_plots` to arrange all paired plots in the desired layout
final_plot <- wrap_plots(paired_plots, ncol = 2)
# Print the final combined plot
print(final_plot)
write.csv(phy_groups_total_capture, "./phy_groups_total_capture.csv")
pair.data <- phy_groups_total_capture |>
select(c("Total_CO2_capture", "year", "Solution", "temp", "shifts"))
ggpairs(pair.data)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(GGally)
library(dtwclust)
library(dplyr)
library(readr)
library(patchwork)
library(gridExtra)
# Create a funtion to prepocess and join all the files
process_file <- function(file, file_id){
file_number <- str_extract(file, "(?<=/)[^/]+(?=\\.out$)") # Extracting the file number
data <- read.table(file, header = TRUE) |>
filter(state == "transp") |> # Get the files which have state as transp
mutate(year = time/(3600*24*365)) |> # Convert form sec to year
rename(`C(4)` = "C.4.") |>
select(c('soln', 'Calcite', 'Sr', 'C(4)', 'year')) |>
group_by(year) |>
mutate(avg_calcite = ifelse(soln %in% 1:10, mean(Calcite[soln %in% 1:10]), Calcite)) |> # Getting the average value for Calcite
ungroup() |>
# Conversions from mole/liter to CO2/Ha
mutate(Calcite = avg_calcite,
Calcite = Calcite * 500000 * 44 / 1000000 / ifelse(soln %in% 1:10, 1, 10),
`C(4)` = `C(4)` * 500000 * 44 / 1000000 / 10,
file_id = file_id) |>
select(-avg_calcite)
return(data)
}
# Seting the base path for alljobs directory
base_path <- "../Data/alljobs"
# Getting all the simulation folders from the base directory
folders <- list.dirs(path = base_path, full.names = TRUE, recursive = FALSE)
all_data <- list()
file_counter <- 1
for (folder in folders) {
# Adjust the pattern to match your .out files, if they have a specific naming convention
file_paths <- list.files(path = folder, full.names = TRUE, pattern = "*.out$")
data <- process_file(file_paths, file_counter)
all_data <- bind_rows(all_data, data)
file_counter <- file_counter + 1
}
write.csv(all_data, "./all_data.csv")
# So let's get the data where the soln value is 11
# We remove the Sr column as we do not need the Sr data for total CO2 caputre data.
soln_11_data <- all_data |>
filter(soln == 11) |>
group_by(file_id)|>
mutate(`C(4)` = cumsum(`C(4)`)) |>
ungroup()|>
dplyr::select(-"Sr")
calcite <- all_data |>
filter(soln %in% 1:10) |>
dplyr::select(-"Sr")
# Now we can use the claclite and soln_11_data to create the total_capture data that we need to plot for the 126 files.
total_capture <- full_join(calcite, soln_11_data, by = c("year", "file_id"), suffix = c(".soil", ".effluent")) |>
mutate(Total_CO2_capture = Calcite.soil + `C(4).effluent` + Calcite.effluent) |>
filter(soln.soil == 1) |>
dplyr::select(c(Total_CO2_capture, year, file_id))
total_capture <- drop_na(total_capture)
p1 <- ggplot(total_capture, aes(x = year, y = Total_CO2_capture, group = file_id, color = as.factor(file_id))) +
geom_line(show.legend = FALSE) +  # Set show.legend to FALSE to avoid overcrowding with legend
labs(title = "Total CO2 Capture for Each File Over Time",
x = "Year",
y = "Total CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "none")  # Remove legend
selected_file_ids <- seq(1, 126, by = 10)
# Filter the data for the selected file IDs
selected_data <- total_capture %>%
filter(file_id %in% selected_file_ids)
# Plotting smoothed lines for selected files
p2 <- ggplot(selected_data, aes(x = year, y = Total_CO2_capture, group = file_id, color = as.factor(file_id))) +
geom_smooth(se = FALSE, method = "loess") +   # Add smoothed trend lines
scale_color_viridis_d(option = "C") +          # Use a color scale that prints well in black and white
labs(title = "Total CO2 Capture Over Time for Selected Files",
x = "Year",
y = "Total CO2 Capture (tonnes CO2/ha)",
color = "File ID") +
scale_color_viridis_d() +
theme_minimal()
p1
summary_CO2_data <- total_capture |>
group_by(year) |>
summarise(
mean_CO2_capture = mean(Total_CO2_capture)
) |>
ungroup()
summary_calcite_data <- calcite |>
group_by(year) |>
summarise(
mean_calcite_capture = mean(Calcite)
) |>
ungroup()
summary_effluent <- soln_11_data |>
group_by(year) |>
summarise(
mean_c4_capture = mean(`C(4)`),
mean_effluent_calcite_capture = mean(Calcite)
) |>
ungroup()
# Plotting with mean and confidence intervals
ggplot() +
geom_smooth(aes(x = year, y = mean_CO2_capture, color = "Mean CO2 capture"), se = F, data = summary_CO2_data) +
geom_smooth(aes(x = year, y = mean_calcite_capture, color = "Mean Soil Calcite"), se = F, data = summary_calcite_data) +
geom_smooth(aes(x = year, y = mean_c4_capture + mean_effluent_calcite_capture, color = "Mean Effluent Calcite + Bicarbonate"), se = F, data = summary_effluent) +
labs(title = "Average Total CO2 Capture Over Time",
x = "Year",
y = "Total CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "bottom")
data_for_clustering <- total_capture[, c("Total_CO2_capture", "file_id")]
wcss <- sapply(1:10, function(k){
kmeans(data_for_clustering, centers = k)$tot.withinss
})
elbow_plot <- data.frame(k = 1:10, wcss = wcss)
ggplot(elbow_plot, aes(x = k, y = wcss), bins = 10) +
geom_point() +
geom_line() +
labs(title = "Elbow Method for  Optimal k",
x = "Number of clusters (k)",
y = "Total Within-Cluster Sum of Squares (WCSS)")
# set.seed(123) # for reproducibility
clusters <- kmeans(data_for_clustering, centers = 4)
#
# Assign cluster labels back to the file_id
kmean_total_caputer <- total_capture %>%
mutate(group = as.factor(clusters$cluster[match(file_id, data_for_clustering$file_id)]))
## Now that we have the clusters, let's get the mean for those groups
group_mean <- kmean_total_caputer |>
group_by(year, group) |>
summarize(mean_CO2 = mean(Total_CO2_capture, na.rm = TRUE), .groups = 'drop')
plot.k.means.facet <- ggplot() +
geom_line(data = kmean_total_caputer, aes(x = year, y = Total_CO2_capture, group = file_id, color = group), alpha = 0.2) +
geom_smooth(data = group_mean, aes(x = year, y = mean_CO2, group = group, color = group), size = 1.5) +
facet_wrap( ~ group) +
labs(title = "Total CO2 Capture group vise facet",
x = "Year",
y = "Total CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "bottom")
plot.k.means <- ggplot() +
geom_line(data = kmean_total_caputer, aes(x = year, y = Total_CO2_capture, group = file_id, color = group), alpha = 0.3) +
labs(title = "Total CO2 Capture group vise",
x = "Year",
y = "Total CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "none")
plot.all <- ggplot() +
geom_smooth(data = group_mean, aes(x = year, y = mean_CO2, group = group, color = group), level = 0.95) +
labs(title = "Mean CO2 Capture group vise",
x = "Year",
y = "Mean CO2 Capture (tonnes CO2/ha)") +
theme_minimal() +
theme(legend.position = "none")
plot.k.means.facet / (plot.k.means + plot.all)
get_group <- function(file_id) {
if (file_id <= 18) {
return(1)
} else if (file_id <= 36) {
return(2)
} else if (file_id <= 63) {
return(3)
} else if (file_id <= 81) {
return(4)
} else if (file_id <= 99) {
return(5)
} else {
return(6)
}
}
phy_groups <- readxl::read_excel("groups_by_phy_meaning.xlsx")[, -3]
phy_groups <- phy_groups |>
mutate(group = sapply(file_id, get_group)) |>
select(-"input_file")
phy_groups_total_capture <- merge(total_capture, phy_groups, key="file_id")
phy_groups_mean <- phy_groups_total_capture |>
group_by(year, group) |>
summarize(meanCO2 = mean(Total_CO2_capture, na.rm = TRUE), .groups = "drop")
plot.phy.facet <- ggplot() +
geom_line(data = phy_groups_total_capture, aes(x=year, y=Total_CO2_capture, group=file_id, color=group), alpha=0.2)+
geom_smooth(data = phy_groups_mean, aes(x=year, y=meanCO2, color=group), size = 1) +
facet_wrap( ~ group, scales = "free_y") + # Allowing for different scales on the y-axis
labs(
title = "CO2 Capture by Physical Group",
x = "Year",
y = "CO2 Capture (tonnes CO2/ha)"
) +
theme_minimal() +
theme(legend.position = "bottom")
plot.phy.facet
