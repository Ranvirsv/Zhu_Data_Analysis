---
title: "Test Analysis for Output file 1"
author: "Ranvir Singh Virk"
output: pdf_document
date: "2023-11-02"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)
library(tidyverse)
library(arm)
```

## Loading the data:

```{r}
data <- read_tsv("../Data/200227 run bas1 cvode mod-hfo-corg-ix-calcite.tsv")
```

Total number of rows: `r nrow(data)`\newline
Number of missing rows: 0

## Processing the data: 

Cols needed:\newline

For total CO2 capture (+basalt): Sol 1-5\newline
For soil calcite: Sol 11, Calcite\newline
For Effluent calcite: Sol 11, C(4)\newline


Let's clean the data with choosing only 'transp' for state:
```{r, echo = T}
data.clean <- data |>
  dplyr::filter(state == "transp") |>
  dplyr::mutate(year = time/(3600*24*365)) |>
  # rename("C(4)" = "C.4.") |>
  dplyr::select(c('soln', 'Calcite', 'Sr', 'C(4)', 'year')) 
```

Now that we have clean data, we need to convert the current mole/liter -> ton CO2/Ha and adjusting the average data for the plot

```{r, echo = T}
conversion_rate <- 500000*44/1000000
plot.data <- data.clean |>
  dplyr::group_by(year) |>
  dplyr::mutate(avg_calcite = ifelse(soln %in% 1:10, mean(Calcite[soln %in% 1:10]), Calcite)) |>
  dplyr::ungroup() |>
  dplyr::mutate(Calcite = avg_calcite) |>
  dplyr::select(-avg_calcite) |>
  dplyr::mutate(Calcite = Calcite * conversion_rate / ifelse(soln %in% 1:10, 1, 10),
                `C(4)` = `C(4)` * conversion_rate/10)
```

Ploting the data:
```{r}
soln_11_data <- plot.data |>
  filter(soln == 11) |>
  mutate(`C(4)` = cumsum(`C(4)`)) |>
  dplyr::select(-"Sr")

calcite <- plot.data |>
  filter(soln %in% 1:10) |>
  dplyr::select(-"Sr")

write.csv(soln_11_data, '../Data/Effluent_calcitle_and_bicarbonate.csv')
write.csv(calcite, '../Data/soil_calcite.csv')

total_capture <- full_join(calcite, soln_11_data, by = "year", suffix = c(".soil", ".effluent")) |>
  mutate(Total_CO2_capture = Calcite.soil + `C(4).effluent` + Calcite.effluent) |>
  filter(soln.soil == 1)

ggplot() + 
  geom_smooth(data = total_capture, aes(x = year, y = Total_CO2_capture, color = "Total CO2 capture (+basalt)"), se = F) +
  geom_smooth(data = calcite, aes(x = year, y = Calcite, color = "Soil calcite (+basalt)"), se = F) + 
  geom_smooth(data = soln_11_data, aes(x = year, y = Calcite + `C(4)`, color = "Effluent calcite + bicarbonate (+basalt)"), se = F) + 
  labs(title = "Carbon Capture Analysis", x = "Years", y = "Carbon capture (tonnes CO2/ha)") + 
  scale_color_manual(values = c("blue", "green", "red")) + 
  theme(legend.position = "bottom")
```

Plot for Sr over the years:
```{r, echo = T}
sr_data <- plot.data |>
  filter(soln %in% c(5, 10, 11)) |>
  mutate(Sr = Sr*87.62*1000) |>
  dplyr::select(c("soln", "Sr", "year"))

write.csv(sr_data, '../Data/sr.csv')

# Plotting Sr over the years for soln 1, 5, and 11
ggplot(sr_data, aes(x = year, y = Sr, color = factor(soln))) +
  geom_smooth(se=F) +
  labs(title = "Strontium (Sr) Concentration Over Years",
       x = "Year",
       y = "Sr Concentration (mg/L)",
       color = "Solution") +
  scale_color_manual(values = c("red", "green", "blue"), 
                     labels = c("Soln 5", "Soln 10", "Soln 11")) +
  theme_minimal() +
  theme(legend.position = "bottom")
```


Let's try to fit a regression model for these variables:
```{r}
model <- lm(Total_CO2_capture ~ Calcite.soil + `C(4).effluent` * Calcite.effluent, total_capture)
summary(model)
```
Let's plot the residuals: 
```{r}
par(mfrow = c(2, 2))
plot(model)
```
Stepwise regression to select significant variables
```{r}
step_model <- step(model, direction = "both")
summary(step_model)
```
